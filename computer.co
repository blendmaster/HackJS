#attach hack to global object
@hack = 
	# ROM is just an array of functions
	# so there's no point in using a typed array
	# the assembler creates this array when it recieves input
	# ROM: []

	# since M is a meta register, recreate its functionality using ES5 getters and setters
	M:~ -> @RAM[ @A ]	
	M:~ (it) -> 
		# write to and refresh screen if necessary
		# lots of dirty work to transform jack memory map into pixels
		if 16384 <= @A <= 24575 
			# each screen word is 16 pixels and each @screen pixel is 4 bytes (RGBA)
			offset = ( @A - 16384 ) * 16 * 4
			p = 0 # pixel offset of memory value
			for i from offset til offset + 64 by 4 # 64 bits -> 4 bytes
				# get bit at position p to get 0->255 (white) or 1->0 (black)
				pixel = if (it >> p++ & 1) then 0 else 255
				@screen.data[ i ] = pixel #R
				@screen.data[ i + 1 ] = pixel #G
				@screen.data[ i + 2 ] = pixel #B
			
			# redraw screen
			@canvas.putImageData @screen, 0 0

		# store memory
		@RAM[ @A ] = it

	booted: false
	running: false

	stop: !-> 
		@running = false

	reset: !->
		@stop!
		@boot!

	# beep boop
	boot: !->
		# two bytes per 16 bit int
		# RAM is cleared on boot
		# length 24577 since address 24576 is the keyboard map
		@RAMBuffer = new ArrayBuffer 24577 * 2
		@RAM = new Int16Array @RAMBuffer

		# init real registers
		@A = 0
		@D = 0

		@PC = 0

		# initialize screen
		@canvas.fillStyle = \white
		@canvas.fillRect 0 0 512 256 # make screen opaque white
		# screen now contains opaque white pixels
		@screen = @canvas.getImageData 0 0 512 256

		@booted = true

	start: !-> 
		hack.boot! unless hack.booted
		hack.running = true
		while hack.PC < hack.ROM.length
			hack.ROM[ hack.PC++ ]!  #run next instruction
			# if A is 24576 after the last instruction
			# we're going to assume the program wants keyboard access.
			# to do so, we need to pause execution with setTimeout, so the last keyup
			# handler callback gets processed in javascript thread queue.
			# this is fairly safe, since 99% of the time, when A is 24576, the next
			# instruction will be reading M.
			if hack.A is 24576
				setTimeout hack.continue, 0
				return # stop current function
		hack.running = false

	continue: !->
		if hack.running 
			while hack.PC < hack.ROM.length
				hack.ROM[ hack.PC++ ]!  #run next instruction
				if hack.A is 24576
					setTimeout hack.continue, 0
					return # stop current function
		hack.running = false

	# execute current instruction and increment PC
	step: !-> 
		@boot! unless @booted
		@ROM[ @PC++ ]! if @PC < @ROM.length

	# remap some keys to hack spec
	keys:
		13: 128 # enter
		8: 129 # backspace
		37: 130 # left arrow
		38: 131 # up arrow
		39: 132 # right arrow
		40: 133 # down arrow
		36: 134 # home
		35: 135 # end
		33: 136 # page up
		34: 137 # page down
		46: 139 # delete
		27: 140 # escape
		# f1-f12
		112: 141
		113: 142
		114: 143
		115: 144
		116: 145
		117: 146
		118: 147
		119: 148
		120: 149
		121: 150
		122: 151
		123: 152
		# ASCII keys that javascript doesn't map correctly
		186: 59 # ;
		187: 61 # =
		188: 44 # ,
		189: 45 # -
		190: 46 # .
		191: 47 # /
		192: 96 # `
		219: 91 # [
		220: 92 # \
		221: 93 # ]
		222: 39 # '
		# javascript has these weird math key codes that override = and -
		107: 61
		109: 45

	keyboard: ({keyCode: key}: e) ->
		# XXX pressing unsupport hack keys, but supported js keys,
		# like shift, ctrl, etc will change RAM, but won't really be valid in hack
		hack.RAM[24576] = hack.keys[key] or key if hack.booted # remapped or just ascii
		e.preventDefault! if hack.running # prevent browser from stealing keypresses

	clearkeyboard: -> hack.RAM[24576] = 0 if hack.booted


